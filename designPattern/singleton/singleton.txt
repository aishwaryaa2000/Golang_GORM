Singleton is a creational design pattern that lets you ensure that a class has only one instance, 
while providing a global access point to this instance.

All implementations of the Singleton have these two steps in common:
Make the default constructor private, to prevent other objects from using the new operator with the Singleton class.

Create a static creation method that acts as a constructor. 
Under the hood, this method calls the private constructor to create an object and saves it in a static field. 
All following calls to this method return the cached object. 
This method either creates a new object or returns an existing one if it has already been created.

If your code has access to the Singleton class, then it’s able to call the Singleton’s static method. 
So whenever that method is called, the same object is always returned.

Use the Singleton pattern when a class in your program should have just a single instance available to all clients;
for example, a single database object shared by different parts of the program.


The Singleton pattern solves two problems at the same time, violating the Single Responsibility Principle.
Ensure that a class has just a single instance.
Provide a global access point to that instance. Remember those global variables that you (all right, me)
used to store some essential objects? While they’re very handy,
they’re also very unsafe since any code can potentially overwrite the contents of those variables and crash the app.

Just like a global variable, the Singleton pattern lets you access some object from anywhere in the program. 
However, it also protects that instance from being overwritten by other code.

We can create a single instance inside the init function. This is only applicable if the early initialization of the object is ok. 
The init function is only called once per file in a package,  so we can be sure that only a single instance will be created.



