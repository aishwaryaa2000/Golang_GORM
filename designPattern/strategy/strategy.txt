Strategy is a behavioral design pattern that lets you define a family of algorithms,
put each of them into a separate class, and make their objects interchangeable.

Use the Strategy pattern when you want to use different variants of an algorithm within an object
and be able to switch from one algorithm to another during runtime.

The original class, called context, must have a field for storing a reference to one of the strategies. 
The context delegates the work to a linked strategy object instead of executing it on its own.

The context isn’t responsible for selecting an appropriate algorithm for the job. 
Instead, the client passes the desired strategy to the context. In fact, the context doesn’t know much about strategies. 
It works with all strategies through the same generic interface, which only exposes a single method for triggering 
the algorithm encapsulated within the selected strategy.

This way the context becomes independent of concrete strategies, so you can add new algorithms 
or modify existing ones without changing the code of the context or other strategies.


The original object, called context, holds a reference to a strategy object.
The context delegates executing the behavior to the linked strategy object. 
In order to change the way the context performs its work, other objects may replace the currently linked strategy object with another one.

