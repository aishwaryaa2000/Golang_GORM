package {{.Info.Title}}files

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

func ConnectPostGres() *sql.DB {
	database := "host={{.ConnectDB.Host}} port={{.ConnectDB.Port}} user=postgres password= {{.ConnectDB.Password}}  sslmode={{.ConnectDB.Sslmode}}"

	db, err := sql.Open("postgres", database)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	fmt.Println("Postgres Connected")
	return db
}

func ConnectDB() *sql.DB {
	database := "host={{.ConnectDB.Host}} port=5432 user=postgres password= {{.ConnectDB.Password}} dbname={{.ConnectDB.DatabaseName}} sslmode={{.ConnectDB.Sslmode}}"

	db, err := sql.Open("postgres", database)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	fmt.Println("Databases Connected")
	return db
}

func CreateDB() {
	query := `create database {{.ConnectDB.DatabaseName}}`
	db := ConnectPostGres()
	_, err := db.Exec(query)
	if err != nil {
		fmt.Println("Error:", err)
	}
	fmt.Println("Database Created")
}

func CreateTB() {
	query := `create table {{.ConnectDB.TableName}} ({{$len:=len .ConnectDB.TBproperties.Col}} {{$temp:=dec $len}} {{range $index,$val := .ConnectDB.TBproperties.Col}} {{if eq $temp $index}}  {{.Cname}} {{.Ctype}} {{else}}  {{.Cname}} {{.Ctype}}, {{end}} {{end}});`
	db := ConnectDB()
	_, err := db.Exec(query)
	if err != nil {
		fmt.Println("Error:", err)
	}
	fmt.Println("Table Created")
}
